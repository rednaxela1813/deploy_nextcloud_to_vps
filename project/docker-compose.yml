services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nextcloud}
      POSTGRES_USER: ${POSTGRES_USER:-nextcloud}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?set in env}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nextcloud} -d ${POSTGRES_DB:-nextcloud}"]
      interval: 5s
      timeout: 5s
      retries: 20

  valkey:
    image: valkey/valkey:latest
    restart: unless-stopped
    command: ["valkey-server", "--appendonly", "yes"]
    volumes:
      - valkey_data:/data
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  elasticsearch:
    build: ./elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=${ES_JAVA_OPTS:--Xms512m -Xmx512m}
    ulimits:
      memlock: { soft: -1, hard: -1 }
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9200 >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30

  nextcloud:
    build: ./nextcloud
    restart: unless-stopped
    depends_on:
      db:           { condition: service_healthy }
      valkey:       { condition: service_started }
      elasticsearch:{ condition: service_healthy }
    environment:
      # DB
      POSTGRES_HOST: db
      POSTGRES_DB: ${POSTGRES_DB:-nextcloud}
      POSTGRES_USER: ${POSTGRES_USER:-nextcloud}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?set in env}

      # Admin (первичный автопровижен)
      NEXTCLOUD_ADMIN_USER: ${NEXTCLOUD_ADMIN_USER:-admin}
      NEXTCLOUD_ADMIN_PASSWORD: ${NEXTCLOUD_ADMIN_PASSWORD:?set in env}

      # Redis/Valkey
      REDIS_HOST: valkey
      REDIS_HOST_PORT: 6379

      # Публичные параметры (универсально dev/prod)
      # Эти имена соответствуют переменным, которые мы далее применим в nginx и в init-скрипте
      PUBLIC_HOST:     ${PUBLIC_HOST:-localhost}
      PUBLIC_SCHEME:   ${PUBLIC_SCHEME:-http}
      PUBLIC_ORIGIN:   ${PUBLIC_ORIGIN:-http://localhost:8080}

      # Trusted domains для первичной установки (Nextcloud парсит как space-separated)
      NEXTCLOUD_TRUSTED_DOMAINS: "${PUBLIC_HOST} localhost 127.0.0.1"
    volumes:
      - nextcloud_html:/var/www/html
      - nextcloud_data:/var/www/html/data
    healthcheck:
      # Проверяем реальный статус PHP-приложения (обходит редиректы nginx)
      test: ["CMD-SHELL", "curl -fsS http://localhost/status.php | grep -q 'installed' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 60

  # Одноразовый инициализатор (в т.ч. проставим backgroundjobs_mode=cron и overwrite*)
  nc-init:
    build: ./nextcloud
    depends_on:
      nextcloud: { condition: service_started }
    user: "33:33"
    volumes:
      - nextcloud_html:/var/www/html
      - nextcloud_data:/var/www/html/data
      - ./nextcloud/my_scripts/nc-init.sh:/nc-init.sh:ro
    entrypoint: ["/bin/sh","-lc"]
    command: "/nc-init.sh"
    restart: "no"

  # Устойчивый cron-сервис (каждые ~5 минут /cron.sh запускает фоновые задания)
  nextcloud-cron:
    build: ./nextcloud
    restart: unless-stopped
    depends_on:
      nextcloud: { condition: service_started }
    user: "33:33"
    working_dir: /var/www/html
    entrypoint: ["/bin/sh","-lc","/cron.sh"]
    volumes:
      - nextcloud_html:/var/www/html
      - nextcloud_data:/var/www/html/data

  nginx:
    image: nginx:1.27-alpine
    restart: unless-stopped
    depends_on:
      nextcloud: { condition: service_started }
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nextcloud_html:/var/www/html:ro
      - ./nginx/nextcloud.conf.tmpl:/etc/nginx/templates/nextcloud.conf.template:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    environment:
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/conf.d
      # Для server_name: можно перечислить несколько (домены/локал), но для сертификата
      # пусть в prod-оверрайде будет первичный домен (см. prod файл ниже)
      - SERVER_NAME=${PUBLIC_HOST:?set PUBLIC_HOST in .env} localhost 127.0.0.1 nextcloud
    healthcheck:
      # Проверяем, что прокси реально отдаёт логин-страницу (без HTTPS-серта это будет 301 → ok)
      test: ["CMD-SHELL", "wget -qO- http://localhost/ | grep -qi nextcloud || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

volumes:
  db_data:
  valkey_data:
  es_data:
  nextcloud_html:
  nextcloud_data:

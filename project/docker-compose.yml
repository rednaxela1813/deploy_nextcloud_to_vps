services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nextcloud}
      POSTGRES_USER: ${POSTGRES_USER:-nextcloud}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?set in env}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nextcloud} -d ${POSTGRES_DB:-nextcloud}"]
      interval: 5s
      timeout: 5s
      retries: 20

  valkey:
    image: valkey/valkey:latest
    restart: unless-stopped
    command: ["valkey-server", "--appendonly", "yes"]
    volumes:
      - valkey_data:/data
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  elasticsearch:
    build: ./elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=${ES_JAVA_OPTS:--Xms512m -Xmx512m}
    ulimits:
      memlock: { soft: -1, hard: -1 }
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9200 >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30

  nextcloud:
    build: ./nextcloud
    restart: unless-stopped
    depends_on:
      - db
      - valkey
      - elasticsearch
    environment:
      # DB
      POSTGRES_HOST: db
      POSTGRES_DB: ${POSTGRES_DB:-nextcloud}
      POSTGRES_USER: ${POSTGRES_USER:-nextcloud}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?set in env}

      # Admin (первая инициализация)
      NEXTCLOUD_ADMIN_USER: ${NEXTCLOUD_ADMIN_USER:-admin}
      NEXTCLOUD_ADMIN_PASSWORD: ${NEXTCLOUD_ADMIN_PASSWORD:?set in env}

      # Redis/Valkey
      REDIS_HOST: valkey
      REDIS_HOST_PORT: 6379

      # Публичные параметры (используются init-скриптом и для trusted domains)
      PUBLIC_HOST:   ${NEXTCLOUD_OVERWRITE_HOST:-localhost}
      PUBLIC_SCHEME: ${PUBLIC_SCHEME:-https}
      PUBLIC_ORIGIN: ${PUBLIC_ORIGIN:-https://localhost}

      # Trusted domains space-separated
      NEXTCLOUD_TRUSTED_DOMAINS: "${NEXTCLOUD_OVERWRITE_HOST:-localhost} localhost 127.0.0.1"
    volumes:
      - nextcloud_html:/var/www/html
      - nextcloud_data:/var/www/html/data
    healthcheck:
      # не требуем "installed", чтобы не мешать первичке
      test: ["CMD-SHELL", "curl -fsS http://localhost/status.php >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 60

  # одноразовая инициализация (overwrite*, cron, FTS-аппы и т.д.)
  nc-init:
    build: ./nextcloud
    depends_on:
      - nextcloud
    user: "33:33"
    volumes:
      - nextcloud_html:/var/www/html
      - nextcloud_data:/var/www/html/data
      - ./nextcloud/my_scripts/nc-init.sh:/nc-init.sh:ro
    entrypoint: ["/bin/sh","-lc"]
    command: "/nc-init.sh"
    restart: "no"

  # крон раз в ~5 минут
  cron:
    build: ./nextcloud
    restart: unless-stopped
    depends_on:
      - nextcloud
    
    working_dir: /var/www/html
    entrypoint: /cron.sh
    volumes:
      - nextcloud_html:/var/www/html
      - nextcloud_data:/var/www/html/data

  nginx:
    image: nginx:1.27-alpine
    restart: unless-stopped
    depends_on:
      - nextcloud
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nextcloud_html:/var/www/html:ro
      - ./nginx/nextcloud.conf.tmpl:/etc/nginx/templates/nextcloud.conf.template:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    environment:
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/conf.d
      - SERVER_NAME=${NEXTCLOUD_OVERWRITE_HOST}        # главный домен (CN)
      - SERVER_ALIASES=localhost 127.0.0.1 nextcloud   # любые алиасы
      - CERT_DOMAIN=${CERT_DOMAIN}                     # каталог в /etc/letsencrypt/live/

    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost/ | grep -qi nextcloud || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  


volumes:
  db_data:
  valkey_data:
  es_data:
  nextcloud_html:
  nextcloud_data:
